---
AWSTemplateFormatVersion: "2010-09-09"
Description: Stack to Create ECS Task Definition

Parameters:
  EcsTaskExecutionRoleArn:
    Type: String
  ScsTaskRoleArn:
    Type: String
  MongoDns:
    Type: String
    Default: mongo.cloudnative.work
  GeodeDns:
    Type: String
    Default: geode.cloudnative.work

Resources:
  LogGroupGeode:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/ecs/spring-boot-geode-server"

  DefGeode: 
    Type: "AWS::ECS::TaskDefinition"
    Properties: 
      RequiresCompatibilities:
        - "EC2"
      Cpu: "1024"
      ExecutionRoleArn:
        Ref: EcsTaskExecutionRoleArn
      Memory: "2048"
      TaskRoleArn:
        Ref: ScsTaskRoleArn
      ContainerDefinitions: 
        - 
          Name: "spring-boot-geode-server"
          Image: "komushi/spring-boot-geode-server"
          Essential: "true"
          PortMappings:
            -
              ContainerPort: 40404
              HostPort: 40404
              Protocol: "tcp"
          LogConfiguration: 
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref "LogGroupGeode"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

  LogGroupMongo:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/ecs/mongo-geojson"

  DefMongo: 
    Type: "AWS::ECS::TaskDefinition"
    Properties: 
      RequiresCompatibilities:
        - "EC2"
      Cpu: "1024"
      ExecutionRoleArn:
        Ref: EcsTaskExecutionRoleArn
      Memory: "2048"
      TaskRoleArn:
        Ref: ScsTaskRoleArn
      ContainerDefinitions: 
        - 
          Name: "mongo-geojson"
          Image: "komushi/mongo-geojson"
          Essential: "true"
          PortMappings:
            -
              ContainerPort: 27017
              HostPort: 27017
              Protocol: "tcp"
          LogConfiguration: 
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref "LogGroupMongo"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

  LogGroupSourceHttp:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: "/ecs/scs-source-http"

  DefSourceHttp: 
    Type: "AWS::ECS::TaskDefinition"
    Properties: 
      RequiresCompatibilities:
        - "EC2"
      Cpu: "512"
      ExecutionRoleArn:
        Ref: EcsTaskExecutionRoleArn
      Memory: "1024"
      TaskRoleArn:
        Ref: ScsTaskRoleArn
      ContainerDefinitions: 
        - 
          Name: "scs-source-http"
          Image: "komushi/scs-source-http"
          Command: 
            - "--server.port=9000"
            - "--spring.cloud.stream.defaultBinder=kinesis"
            - "spring.cloud.stream.default.contentType=text/plain"
            - "spring.cloud.stream.bindings.output.destination=http_raw"
            - "spring.cloud.stream.bindings.output.producer.partitionKeyExpression=1"
            - !Join
              - ""
              - - "--cloud.aws.region.static="
                - !Ref "AWS::Region"
          Essential: "true"
          LogConfiguration: 
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref "LogGroupSourceHttp"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

  DefProcessorGeocoding: 
    Type: "AWS::ECS::TaskDefinition"
    Properties: 
      RequiresCompatibilities:
        - "EC2"
      Cpu: "512"
      ExecutionRoleArn:
        Ref: EcsTaskExecutionRoleArn
      Memory: "1024"
      TaskRoleArn:
        Ref: ScsTaskRoleArn
      ContainerDefinitions: 
        - 
          Name: "scs-processor-geocoding-reverse"
          Image: "komushi/scs-processor-geocoding-reverse"
          Command: 
            - "--server.port=9100"
            - "--spring.cloud.stream.defaultBinder=kinesis"
            - "--spring.cloud.stream.bindings.input.destination=http_raw"
            - "--spring.cloud.stream.bindings.input.group=geocoding"
            - "--spring.cloud.stream.bindings.input.contentType=text/plain"
            - "--spring.cloud.stream.bindings.output.destination=transform_geotuple"
            - "--spring.cloud.stream.bindings.output.contentType=application/json"
            - "--spring.cloud.stream.bindings.output.producer.partitionKeyExpression=1"
            - "--logging.level.info.cloudnative=TRACE"
            - "--properties.mongo.port=27017"
            - "--properties.mongo.database=geojson"
            - "--properties.mongo.collection=blocks"
            - "--properties.mongo.user=root"
            - "--properties.mongo.password=keepitsimple"
            - !Join
              - ""
              - - "--cloud.aws.region.static="
                - !Ref "AWS::Region"
            - !Join
              - ""
              - - "--properties.mongo.hostName="
                - !Ref MongoDns
          Essential: "true"
          LogConfiguration: 
            LogDriver: "awslogs"
            Options:
              awslogs-group: "/ecs/scs-source-http"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

  DefSinkGemfire: 
    Type: "AWS::ECS::TaskDefinition"
    Properties: 
      RequiresCompatibilities:
        - "EC2"
      Cpu: "1024"
      ExecutionRoleArn:
        Ref: EcsTaskExecutionRoleArn
      Memory: "2048"
      TaskRoleArn:
        Ref: ScsTaskRoleArn
      ContainerDefinitions: 
        - 
          Name: "scs-sink-gemfire"
          Image: "komushi/scs-sink-gemfire"
          Command: 
            - "--server.port=9200"
            - "--spring.cloud.stream.defaultBinder=kinesis"
            - "--spring.cloud.stream.bindings.input.destination=transform_geotuple"
            - "--spring.cloud.stream.bindings.input.group=gemfire"
            - "--spring.cloud.stream.bindings.input.contentType=application/json"
            - "--gemfire.pool.connect-type=server"
            - "--gemfire.pool.region-names=RegRaw"
            - "--gemfire.json=true"
            - "--gemfire.key-expression=payload.getField('uuid')"
            - !Join
              - ""
              - - "--cloud.aws.region.static="
                - !Ref "AWS::Region"
            - !Join
              - ""
              - - "--gemfire.pool.host-addresses="
                - !Ref GeodeDns
                - ":"
                - "40404"
          Essential: "true"
          LogConfiguration: 
            LogDriver: "awslogs"
            Options:
              awslogs-group: "/ecs/scs-sink-gemfire"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

Outputs:
  # DefSourceHttpArn:
  #   Description: ARN of the scs-source-http task definition
  #   Value:
  #     Ref: DefSourceHttp
  DefMongoArn:
    Description: ARN of the Mongo task definition
    Value:
      Ref: DefMongo
  DefGeodeArn:
    Description: ARN of the Geode task definition
    Value:
      Ref: DefGeode
