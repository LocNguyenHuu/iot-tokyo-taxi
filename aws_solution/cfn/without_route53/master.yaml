---
AWSTemplateFormatVersion: '2010-09-09'
Description: Main Template For Spring Cloud Stream IoT Demo

Parameters:
  VpcId:
    Description: ID of VPC
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Description: Choose which subnets the Network Load Balancer should be deployed to
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroup:
    Description: Select the Security Group to apply to the Applicaion Load Balancer
    Type: AWS::EC2::SecurityGroup::Id
  EcsClusterName:
    Type: String

Resources:
  IamStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/without_route53/iam.yaml

  TaskDefBackendStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/without_route53/task-def-backend.yaml
      Parameters:
        EcsTaskExecutionRoleArn: !GetAtt IamStack.Outputs.EcsTaskExecutionRoleArn
        ScsTaskRoleArn: !GetAtt IamStack.Outputs.ScsTaskRoleArn
        StackName: !Ref AWS::StackName

#temporary use CLB and ALB before NLB
  ClbStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/without_route53/clb.yaml
      Parameters:
        PublicSubnets: !Join [ ",", !Ref PublicSubnets ]
        SecurityGroup: !Ref SecurityGroup
        StackName: !Ref AWS::StackName

  EcsBackendStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/without_route53/ecs-backend-clb.yaml
      Parameters:
        StackName: !Ref AWS::StackName
        TaskDefMongoArn: !GetAtt TaskDefBackendStack.Outputs.DefMongoArn
        TaskDefGeodeArn: !GetAtt TaskDefBackendStack.Outputs.DefGeodeArn
        LoadBalancerGeodeName: !GetAtt ClbStack.Outputs.LoadBalancerGeodeName
        LoadBalancerMongoName: !GetAtt ClbStack.Outputs.LoadBalancerMongoName
        EcsClusterArn: 
          !Join
          - ":"
          - - "arn"
            - "aws"
            - "ecs"
            - !Ref "AWS::Region"
            - !Ref "AWS::AccountId"
            - !Sub cluster/${EcsClusterName}

  TaskDefBackendStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/without_route53/task-def-backend.yaml
      Parameters:
        StackName: !Ref AWS::StackName
        EcsTaskExecutionRoleArn: !GetAtt IamStack.Outputs.EcsTaskExecutionRoleArn
        ScsTaskRoleArn: !GetAtt IamStack.Outputs.ScsTaskRoleArn

  AlbStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/without_route53/alb.yaml
      Parameters:
        VpcId: !Ref VpcId
        PublicSubnets: !Join [ ",", !Ref PublicSubnets ]
        SecurityGroup: !Ref SecurityGroup
        StackName: !Ref AWS::StackName

  TaskDefScsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/without_route53/task-def-scs.yaml
      Parameters:
        StackName: !Ref AWS::StackName
        EcsTaskExecutionRoleArn: !GetAtt IamStack.Outputs.EcsTaskExecutionRoleArn
        ScsTaskRoleArn: !GetAtt IamStack.Outputs.ScsTaskRoleArn
        MongoDns: !GetAtt ClbStack.Outputs.LoadBalancerMongoDns
        GeodeDns: !GetAtt ClbStack.Outputs.LoadBalancerGeodeDns

  EcsScsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/without_route53/ecs-scs-alb.yaml
      Parameters:
        StackName: !Ref AWS::StackName
        TaskDefSourceHttp9000Arn: !GetAtt TaskDefScsStack.Outputs.DefSourceHttp9000Arn
        TaskDefProcessorGeocodingArn: !GetAtt TaskDefScsStack.Outputs.DefProcessorGeocodingArn
        TaskDefSinkStomp9210Arn: !GetAtt TaskDefScsStack.Outputs.DefSinkStomp9210Arn
        TaskDefSinkGemfireArn: !GetAtt TaskDefScsStack.Outputs.DefSinkGemfireArn
        TaskDefSourceGemfireDistrictArn: !GetAtt TaskDefScsStack.Outputs.DefSourceGemfireDistrictArn
        TaskDefSourceGemfireRouteArn: !GetAtt TaskDefScsStack.Outputs.DefSourceGemfireRouteArn
        TaskDefSinkStomp9400Arn: !GetAtt TaskDefScsStack.Outputs.DefSinkStomp9400Arn
        TaskDefSinkStomp9410Arn: !GetAtt TaskDefScsStack.Outputs.DefSinkStomp9410Arn        
        TargetGroupSourceHttp9000Arn: !GetAtt AlbStack.Outputs.TargetGroupSourceHttp9000Arn
        TargetGroupSinkStomp9210Arn: !GetAtt AlbStack.Outputs.TargetGroupSinkStomp9210Arn
        TargetGroupSinkStomp9400Arn: !GetAtt AlbStack.Outputs.TargetGroupSinkStomp9400Arn
        TargetGroupSinkStomp9410Arn: !GetAtt AlbStack.Outputs.TargetGroupSinkStomp9410Arn
        EcsClusterArn: 
          !Join
          - ":"
          - - "arn"
            - "aws"
            - "ecs"
            - !Ref "AWS::Region"
            - !Ref "AWS::AccountId"
            - !Sub cluster/${EcsClusterName}

# waiting for the NLB cross region feature
  # NlbStack:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/nlb.yaml
  #     Parameters:
  #       VpcId: !Ref VpcId
  #       PublicSubnets: !Join [ ",", !Ref PublicSubnets ]
  #       StackName: !Ref AWS::StackName

  # EcsStack:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: https://cfn-template-group.s3.amazonaws.com/scs-iot/ecs-backend-nlb.yaml
  #     Parameters:
  #       TaskDefMongoArn: !GetAtt TaskDefBackendStack.Outputs.DefMongoArn
  #       TaskDefGeodeArn: !GetAtt TaskDefBackendStack.Outputs.DefGeodeArn
  #       TargetGroupMongoArn: !GetAtt NlbStack.Outputs.TargetGroupMongoArn
  #       TargetGroupGeodeArn: !GetAtt NlbStack.Outputs.TargetGroupGeodeArn
  #       EcsClusterArn: "arn:aws:ecs:ap-northeast-1:042083552617:cluster/ec2-scs"

